name: release
on: [push, pull_request]
#on:
  #push:
    #tags:
      #- '*'

env:
  DEVELOPER_DIR: /Applications/Xcode_12.2.app/Contents/Developer
  EMSCRIPTEN_VERSION: 2.0.8

jobs:

  full-source:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: package
      run: |
        rm -rf .git
        rm -f /tmp/ncnn-full-source.zip
        zip -9 -r /tmp/ncnn-full-source.zip .
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-full-source
        path: /tmp/ncnn-full-source.zip

  ubuntu-1604:
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: apt
      run: |
        sudo apt-get install -y libvulkan-dev libprotobuf-dev protobuf-compiler
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ncnn-ubuntu-1604
        mkdir -p ncnn-ubuntu-1604
        cp -r build/install/* ncnn-ubuntu-1604
        mkdir -p ncnn-ubuntu-1604/bin
        cp build/tools/caffe/caffe2ncnn ncnn-ubuntu-1604/bin
        cp build/tools/mxnet/mxnet2ncnn ncnn-ubuntu-1604/bin
        cp build/tools/onnx/onnx2ncnn ncnn-ubuntu-1604/bin
        cp build/tools/darknet/darknet2ncnn ncnn-ubuntu-1604/bin
        cp build/tools/ncnnoptimize ncnn-ubuntu-1604/bin
        cp build/tools/ncnn2mem ncnn-ubuntu-1604/bin
        cp build/tools/ncnnmerge ncnn-ubuntu-1604/bin
        strip -g ncnn-ubuntu-1604/bin/*
        rm -f ncnn-ubuntu-1604.zip
        zip -9 -r ncnn-ubuntu-1604.zip ncnn-ubuntu-1604
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-ubuntu-1604
        path: ncnn-ubuntu-1604.zip

  ubuntu-1804:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: apt
      run: |
        sudo apt-get install -y libvulkan-dev libprotobuf-dev protobuf-compiler
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ncnn-ubuntu-1804
        mkdir -p ncnn-ubuntu-1804
        cp -r build/install/* ncnn-ubuntu-1804
        mkdir -p ncnn-ubuntu-1804/bin
        cp build/tools/caffe/caffe2ncnn ncnn-ubuntu-1804/bin
        cp build/tools/mxnet/mxnet2ncnn ncnn-ubuntu-1804/bin
        cp build/tools/onnx/onnx2ncnn ncnn-ubuntu-1804/bin
        cp build/tools/darknet/darknet2ncnn ncnn-ubuntu-1804/bin
        cp build/tools/ncnnoptimize ncnn-ubuntu-1804/bin
        cp build/tools/ncnn2mem ncnn-ubuntu-1804/bin
        cp build/tools/ncnnmerge ncnn-ubuntu-1804/bin
        strip -g ncnn-ubuntu-1804/bin/*
        rm -f ncnn-ubuntu-1804.zip
        zip -9 -r ncnn-ubuntu-1804.zip ncnn-ubuntu-1804
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-ubuntu-1804
        path: ncnn-ubuntu-1804.zip

  ubuntu-2004:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: apt
      run: |
        sudo apt-get install -y libvulkan-dev libprotobuf-dev protobuf-compiler
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ncnn-ubuntu-2004
        mkdir -p ncnn-ubuntu-2004
        cp -r build/install/* ncnn-ubuntu-2004
        mkdir -p ncnn-ubuntu-2004/bin
        cp build/tools/caffe/caffe2ncnn ncnn-ubuntu-2004/bin
        cp build/tools/mxnet/mxnet2ncnn ncnn-ubuntu-2004/bin
        cp build/tools/onnx/onnx2ncnn ncnn-ubuntu-2004/bin
        cp build/tools/darknet/darknet2ncnn ncnn-ubuntu-2004/bin
        cp build/tools/ncnnoptimize ncnn-ubuntu-2004/bin
        cp build/tools/ncnn2mem ncnn-ubuntu-2004/bin
        cp build/tools/ncnnmerge ncnn-ubuntu-2004/bin
        strip -g ncnn-ubuntu-2004/bin/*
        rm -f ncnn-ubuntu-2004.zip
        zip -9 -r ncnn-ubuntu-2004.zip ncnn-ubuntu-2004
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-ubuntu-2004
        path: ncnn-ubuntu-2004.zip

  openmp-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: cache-openmp
      id: cache-openmp
      uses: actions/cache@v1
      with:
        path: openmp-install
        key: openmp-macos-install-20201213-2
    - name: openmp
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/openmp-11.0.0.src.tar.xz
        tar -xf openmp-11.0.0.src.tar.xz
        cd openmp-11.0.0.src
        sed -i'' -e '/.size __kmp_unnamed_critical_addr/d' runtime/src/z_Linux_asm.S
        sed -i'' -e 's/__kmp_unnamed_critical_addr/___kmp_unnamed_critical_addr/g' runtime/src/z_Linux_asm.S
    - name: build-x86_64
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        cd openmp-11.0.0.src
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            -DLIBOMP_ENABLE_SHARED=OFF -DLIBOMP_OMPT_SUPPORT=OFF -DLIBOMP_USE_HWLOC=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        cd openmp-11.0.0.src
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DCMAKE_OSX_ARCHITECTURES="arm64" \
            -DLIBOMP_ENABLE_SHARED=OFF -DLIBOMP_OMPT_SUPPORT=OFF -DLIBOMP_USE_HWLOC=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: merge-fat-library
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        rm -rf $GITHUB_WORKSPACE/openmp-install
        mkdir -p $GITHUB_WORKSPACE/openmp-install
        cp -r openmp-11.0.0.src/build-x86_64/install/include $GITHUB_WORKSPACE/openmp-install
        mkdir -p $GITHUB_WORKSPACE/openmp-install/lib
        lipo -create openmp-11.0.0.src/build-x86_64/install/lib/libomp.a openmp-11.0.0.src/build-arm64/install/lib/libomp.a -o $GITHUB_WORKSPACE/openmp-install/lib/libomp.a
    - name: package
      run: |
        rm -rf openmp.framework
        mkdir -p openmp.framework/Versions/A/Headers
        mkdir -p openmp.framework/Versions/A/Resources
        ln -s A openmp.framework/Versions/Current
        ln -s Versions/Current/Headers openmp.framework/Headers
        ln -s Versions/Current/Resources openmp.framework/Resources
        ln -s Versions/Current/openmp openmp.framework/openmp
        cp $GITHUB_WORKSPACE/openmp-install/lib/libomp.a openmp.framework/Versions/A/openmp
        cp -r $GITHUB_WORKSPACE/openmp-install/include/* openmp.framework/Versions/A/Headers/
        sed -e 's/__NAME__/openmp/g' -e 's/__IDENTIFIER__/org.llvm.openmp/g' -e 's/__VERSION__/11.0/g' Info.plist > openmp.framework/Versions/A/Resources/Info.plist
        rm -f openmp-macos.framework.zip
        zip -9 -y -r openmp-macos.framework.zip openmp.framework
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: openmp-macos
        path: openmp-install
    - name: upload-framework
      uses: actions/upload-artifact@v2
      with:
        name: openmp-macos-framework
        path: openmp-macos.framework.zip

  macos:
    needs: [openmp-macos]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: download-openmp-macos
      uses: actions/download-artifact@v2
      with:
        name: openmp-macos
        path: openmp-macos
    - name: install-openmp
      run: |
        sudo cp openmp-macos/include/* $DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
        sudo cp openmp-macos/lib/libomp.a $DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib
    - name: build-x86_64
      run: |
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libomp.a" \
            -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64
      run: |
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DCMAKE_OSX_ARCHITECTURES="arm64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libomp.a" \
            -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ncnn.framework
        mkdir -p ncnn.framework/Versions/A/Headers
        mkdir -p ncnn.framework/Versions/A/Resources
        ln -s A ncnn.framework/Versions/Current
        ln -s Versions/Current/Headers ncnn.framework/Headers
        ln -s Versions/Current/Resources ncnn.framework/Resources
        ln -s Versions/Current/ncnn ncnn.framework/ncnn
        lipo -create build-x86_64/install/lib/libncnn.a build-arm64/install/lib/libncnn.a -o ncnn.framework/Versions/A/ncnn
        cp -r build-x86_64/install/include/* ncnn.framework/Versions/A/Headers/
        sed -e 's/__NAME__/ncnn/g' -e 's/__IDENTIFIER__/com.tencent.ncnn/g' -e 's/__VERSION__/1.0/g' Info.plist > ncnn.framework/Versions/A/Resources/Info.plist
        rm -f ncnn-macos.framework.zip
        zip -9 -y -r ncnn-macos.framework.zip ncnn.framework
    - name: upload-framework
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-macos-framework
        path: ncnn-macos.framework.zip

  macos-gpu:
    needs: [openmp-macos]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: download-openmp-macos
      uses: actions/download-artifact@v2
      with:
        name: openmp-macos
        path: openmp-macos
    - name: install-openmp
      run: |
        sudo cp openmp-macos/include/* $DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
        sudo cp openmp-macos/lib/libomp.a $DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v1
      with:
        path: "vulkansdk-macos-1.2.135.0"
        key: vulkansdk-macos-1.2.135.0
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        wget https://sdk.lunarg.com/sdk/download/1.2.135.0/mac/vulkansdk-macos-1.2.135.0.tar.gz?Human=true -O vulkansdk-macos-1.2.135.0.tar.gz
        tar -xf vulkansdk-macos-1.2.135.0.tar.gz
        rm -rf vulkansdk-macos-1.2.135.0/Applications
        find vulkansdk-macos-1.2.135.0 -type f | grep -v -E 'vulkan|glslang|MoltenVK' | xargs rm
    - name: build-x86_64
      run: |
        export VULKAN_SDK=`pwd`/vulkansdk-macos-1.2.135.0/macOS
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libomp.a" \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64
      run: |
        export VULKAN_SDK=`pwd`/vulkansdk-macos-1.2.135.0/macOS
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DCMAKE_OSX_ARCHITECTURES="arm64" \
            -DCMAKE_CROSSCOMPILING=ON -DCMAKE_SYSTEM_PROCESSOR=arm64 \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libomp.a" \
            -DVulkan_INCLUDE_DIR=`pwd`/../vulkansdk-macos-1.2.135.0/MoltenVK/include \
            -DVulkan_LIBRARY=`pwd`/../vulkansdk-macos-1.2.135.0/MoltenVK/iOS/dynamic/libMoltenVK.dylib \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package-glslang
      run: |
        rm -rf glslang.framework
        mkdir -p glslang.framework/Versions/A/Headers
        mkdir -p glslang.framework/Versions/A/Resources
        ln -s A glslang.framework/Versions/Current
        ln -s Versions/Current/Headers glslang.framework/Headers
        ln -s Versions/Current/Resources glslang.framework/Resources
        ln -s Versions/Current/glslang glslang.framework/glslang
        libtool -static build-x86_64/install/lib/libglslang.a build-x86_64/install/lib/libSPIRV.a build-x86_64/install/lib/libOGLCompiler.a build-x86_64/install/lib/libOSDependent.a -o build-x86_64/install/lib/libglslang_combined.a
        libtool -static build-arm64/install/lib/libglslang.a build-arm64/install/lib/libSPIRV.a build-arm64/install/lib/libOGLCompiler.a build-arm64/install/lib/libOSDependent.a -o build-arm64/install/lib/libglslang_combined.a
        lipo -create build-x86_64/install/lib/libglslang_combined.a build-arm64/install/lib/libglslang_combined.a -o glslang.framework/Versions/A/glslang
        cp -r build-x86_64/install/include/glslang glslang.framework/Versions/A/Headers/
        sed -e 's/__NAME__/glslang/g' -e 's/__IDENTIFIER__/org.khronos.glslang/g' -e 's/__VERSION__/1.0/g' Info.plist > glslang.framework/Versions/A/Resources/Info.plist
        rm -f glslang-macos.framework.zip
        zip -9 -y -r glslang-macos.framework.zip glslang.framework
    - name: package
      run: |
        rm -rf ncnn.framework
        mkdir -p ncnn.framework/Versions/A/Headers
        mkdir -p ncnn.framework/Versions/A/Resources
        ln -s A ncnn.framework/Versions/Current
        ln -s Versions/Current/Headers ncnn.framework/Headers
        ln -s Versions/Current/Resources ncnn.framework/Resources
        ln -s Versions/Current/ncnn ncnn.framework/ncnn
        lipo -create build-x86_64/install/lib/libncnn.a build-arm64/install/lib/libncnn.a -o ncnn.framework/Versions/A/ncnn
        cp -r build-x86_64/install/include/* ncnn.framework/Versions/A/Headers/
        sed -e 's/__NAME__/ncnn/g' -e 's/__IDENTIFIER__/com.tencent.ncnn/g' -e 's/__VERSION__/1.0/g' Info.plist > ncnn.framework/Versions/A/Resources/Info.plist
        rm -f ncnn-macos-vulkan.framework.zip
        zip -9 -y -r ncnn-macos-vulkan.framework.zip ncnn.framework
    - name: upload-glslang-framework
      uses: actions/upload-artifact@v2
      with:
        name: glslang-macos-framework
        path: glslang-macos.framework.zip
    - name: upload-framework
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-macos-vulkan-framework
        path: ncnn-macos-vulkan.framework.zip

  openmp-ios:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: cache-openmp
      id: cache-openmp
      uses: actions/cache@v1
      with:
        path: openmp-install
        key: openmp-ios-install-20201213-2
    - name: openmp
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/openmp-11.0.0.src.tar.xz
        tar -xf openmp-11.0.0.src.tar.xz
        cd openmp-11.0.0.src
        sed -i'' -e '/.size __kmp_unnamed_critical_addr/d' runtime/src/z_Linux_asm.S
        sed -i'' -e 's/__kmp_unnamed_critical_addr/___kmp_unnamed_critical_addr/g' runtime/src/z_Linux_asm.S
    - name: build
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        cd openmp-11.0.0.src
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64" \
            -DPERL_EXECUTABLE=/usr/local/bin/perl \
            -DLIBOMP_ENABLE_SHARED=OFF -DLIBOMP_OMPT_SUPPORT=OFF -DLIBOMP_USE_HWLOC=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        cd openmp-11.0.0.src
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DPERL_EXECUTABLE=/usr/local/bin/perl \
            -DLIBOMP_ENABLE_SHARED=OFF -DLIBOMP_OMPT_SUPPORT=OFF -DLIBOMP_USE_HWLOC=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: merge-fat-library
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        rm -rf $GITHUB_WORKSPACE/openmp-install
        mkdir -p $GITHUB_WORKSPACE/openmp-install
        cp -r openmp-11.0.0.src/build/install/include $GITHUB_WORKSPACE/openmp-install
        mkdir -p $GITHUB_WORKSPACE/openmp-install/lib
        lipo -create openmp-11.0.0.src/build/install/lib/libomp.a openmp-11.0.0.src/build-simulator/install/lib/libomp.a -o $GITHUB_WORKSPACE/openmp-install/lib/libomp.a
    - name: package
      run: |
        rm -rf openmp.framework
        mkdir -p openmp.framework/Versions/A/Headers
        mkdir -p openmp.framework/Versions/A/Resources
        ln -s A openmp.framework/Versions/Current
        ln -s Versions/Current/Headers openmp.framework/Headers
        ln -s Versions/Current/Resources openmp.framework/Resources
        ln -s Versions/Current/openmp openmp.framework/openmp
        cp $GITHUB_WORKSPACE/openmp-install/lib/libomp.a openmp.framework/Versions/A/openmp
        cp -r $GITHUB_WORKSPACE/openmp-install/include/* openmp.framework/Versions/A/Headers/
        sed -e 's/__NAME__/openmp/g' -e 's/__IDENTIFIER__/org.llvm.openmp/g' -e 's/__VERSION__/11.0/g' Info.plist > openmp.framework/Versions/A/Resources/Info.plist
        rm -f openmp-ios.framework.zip
        zip -9 -y -r openmp-ios.framework.zip openmp.framework
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: openmp-ios
        path: openmp-install
    - name: upload-framework
      uses: actions/upload-artifact@v2
      with:
        name: openmp-ios-framework
        path: openmp-ios.framework.zip

  ios:
    needs: [openmp-ios]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: download-openmp-ios
      uses: actions/download-artifact@v2
      with:
        name: openmp-ios
        path: openmp-ios
    - name: install-openmp
      run: |
        sudo cp openmp-ios/include/* $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include
        sudo cp openmp-ios/lib/libomp.a $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib
        sudo cp openmp-ios/include/* $DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/include
        sudo cp openmp-ios/lib/libomp.a $DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/libomp.a" \
            -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/libomp.a" \
            -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ncnn.framework
        mkdir -p ncnn.framework/Versions/A/Headers
        mkdir -p ncnn.framework/Versions/A/Resources
        ln -s A ncnn.framework/Versions/Current
        ln -s Versions/Current/Headers ncnn.framework/Headers
        ln -s Versions/Current/Resources ncnn.framework/Resources
        ln -s Versions/Current/ncnn ncnn.framework/ncnn
        lipo -create build/install/lib/libncnn.a build-simulator/install/lib/libncnn.a -o ncnn.framework/Versions/A/ncnn
        cp -r build/install/include/* ncnn.framework/Versions/A/Headers/
        sed -e 's/__NAME__/ncnn/g' -e 's/__IDENTIFIER__/com.tencent.ncnn/g' -e 's/__VERSION__/1.0/g' Info.plist > ncnn.framework/Versions/A/Resources/Info.plist
        rm -f ncnn-ios.framework.zip
        zip -9 -y -r ncnn-ios.framework.zip ncnn.framework
    - name: upload-framework
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-ios-framework
        path: ncnn-ios.framework.zip

  ios-gpu:
    needs: [openmp-ios]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: download-openmp-ios
      uses: actions/download-artifact@v2
      with:
        name: openmp-ios
        path: openmp-ios
    - name: install-openmp
      run: |
        sudo cp openmp-ios/include/* $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include
        sudo cp openmp-ios/lib/libomp.a $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib
        sudo cp openmp-ios/include/* $DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/include
        sudo cp openmp-ios/lib/libomp.a $DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v1
      with:
        path: "vulkansdk-macos-1.2.135.0"
        key: vulkansdk-macos-1.2.135.0
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        wget https://sdk.lunarg.com/sdk/download/1.2.135.0/mac/vulkansdk-macos-1.2.135.0.tar.gz?Human=true -O vulkansdk-macos-1.2.135.0.tar.gz
        tar -xf vulkansdk-macos-1.2.135.0.tar.gz
        rm -rf vulkansdk-macos-1.2.135.0/Applications
        find vulkansdk-macos-1.2.135.0 -type f | grep -v -E 'vulkan|glslang|MoltenVK' | xargs rm
    - name: build
      run: |
        export VULKAN_SDK=`pwd`/vulkansdk-macos-1.2.135.0/macOS
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=OS64 -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="arm64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/libomp.a" \
            -DVulkan_INCLUDE_DIR=`pwd`/../vulkansdk-macos-1.2.135.0/MoltenVK/include \
            -DVulkan_LIBRARY=`pwd`/../vulkansdk-macos-1.2.135.0/MoltenVK/iOS/dynamic/libMoltenVK.dylib \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=SIMULATOR64 -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="x86_64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/libomp.a" \
            -DVulkan_INCLUDE_DIR=`pwd`/../vulkansdk-macos-1.2.135.0/MoltenVK/include \
            -DVulkan_LIBRARY=`pwd`/../vulkansdk-macos-1.2.135.0/MoltenVK/iOS/dynamic/libMoltenVK.dylib \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package-glslang
      run: |
        rm -rf glslang.framework
        mkdir -p glslang.framework/Versions/A/Headers
        mkdir -p glslang.framework/Versions/A/Resources
        ln -s A glslang.framework/Versions/Current
        ln -s Versions/Current/Headers glslang.framework/Headers
        ln -s Versions/Current/Resources glslang.framework/Resources
        ln -s Versions/Current/glslang glslang.framework/glslang
        libtool -static build/install/lib/libglslang.a build/install/lib/libSPIRV.a build/install/lib/libOGLCompiler.a build/install/lib/libOSDependent.a -o build/install/lib/libglslang_combined.a
        libtool -static build-simulator/install/lib/libglslang.a build-simulator/install/lib/libSPIRV.a build-simulator/install/lib/libOGLCompiler.a build-simulator/install/lib/libOSDependent.a -o build-simulator/install/lib/libglslang_combined.a
        lipo -create build/install/lib/libglslang_combined.a build-simulator/install/lib/libglslang_combined.a -o glslang.framework/Versions/A/glslang
        cp -r build/install/include/glslang glslang.framework/Versions/A/Headers/
        sed -e 's/__NAME__/glslang/g' -e 's/__IDENTIFIER__/org.khronos.glslang/g' -e 's/__VERSION__/1.0/g' Info.plist > glslang.framework/Versions/A/Resources/Info.plist
        rm -f glslang-ios.framework.zip
        zip -9 -y -r glslang-ios.framework.zip glslang.framework
    - name: package
      run: |
        rm -rf ncnn.framework
        mkdir -p ncnn.framework/Versions/A/Headers
        mkdir -p ncnn.framework/Versions/A/Resources
        ln -s A ncnn.framework/Versions/Current
        ln -s Versions/Current/Headers ncnn.framework/Headers
        ln -s Versions/Current/Resources ncnn.framework/Resources
        ln -s Versions/Current/ncnn ncnn.framework/ncnn
        lipo -create build/install/lib/libncnn.a build-simulator/install/lib/libncnn.a -o ncnn.framework/Versions/A/ncnn
        cp -r build/install/include/* ncnn.framework/Versions/A/Headers/
        sed -e 's/__NAME__/ncnn/g' -e 's/__IDENTIFIER__/com.tencent.ncnn/g' -e 's/__VERSION__/1.0/g' Info.plist > ncnn.framework/Versions/A/Resources/Info.plist
        rm -f ncnn-ios-vulkan.framework.zip
        zip -9 -y -r ncnn-ios-vulkan.framework.zip ncnn.framework
    - name: upload-glslang-framework
      uses: actions/upload-artifact@v2
      with:
        name: glslang-ios-framework
        path: glslang-ios.framework.zip
    - name: upload-framework
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-ios-vulkan-framework
        path: ncnn-ios-vulkan.framework.zip

  openmp-ios-bitcode:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: cache-openmp
      id: cache-openmp
      uses: actions/cache@v1
      with:
        path: openmp-install
        key: openmp-ios-bitcode-install-20201213-2
    - name: openmp
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/openmp-11.0.0.src.tar.xz
        tar -xf openmp-11.0.0.src.tar.xz
        cd openmp-11.0.0.src
        sed -i'' -e '/.size __kmp_unnamed_critical_addr/d' runtime/src/z_Linux_asm.S
        sed -i'' -e 's/__kmp_unnamed_critical_addr/___kmp_unnamed_critical_addr/g' runtime/src/z_Linux_asm.S
    - name: build
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        cd openmp-11.0.0.src
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64" \
            -DPERL_EXECUTABLE=/usr/local/bin/perl \
            -DLIBOMP_ENABLE_SHARED=OFF -DLIBOMP_OMPT_SUPPORT=OFF -DLIBOMP_USE_HWLOC=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        cd openmp-11.0.0.src
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DPERL_EXECUTABLE=/usr/local/bin/perl \
            -DLIBOMP_ENABLE_SHARED=OFF -DLIBOMP_OMPT_SUPPORT=OFF -DLIBOMP_USE_HWLOC=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: merge-fat-library
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        rm -rf $GITHUB_WORKSPACE/openmp-install
        mkdir -p $GITHUB_WORKSPACE/openmp-install
        cp -r openmp-11.0.0.src/build/install/include $GITHUB_WORKSPACE/openmp-install
        mkdir -p $GITHUB_WORKSPACE/openmp-install/lib
        lipo -create openmp-11.0.0.src/build/install/lib/libomp.a openmp-11.0.0.src/build-simulator/install/lib/libomp.a -o $GITHUB_WORKSPACE/openmp-install/lib/libomp.a
    - name: package
      run: |
        rm -rf openmp.framework
        mkdir -p openmp.framework/Versions/A/Headers
        mkdir -p openmp.framework/Versions/A/Resources
        ln -s A openmp.framework/Versions/Current
        ln -s Versions/Current/Headers openmp.framework/Headers
        ln -s Versions/Current/Resources openmp.framework/Resources
        ln -s Versions/Current/openmp openmp.framework/openmp
        cp $GITHUB_WORKSPACE/openmp-install/lib/libomp.a openmp.framework/Versions/A/openmp
        cp -r $GITHUB_WORKSPACE/openmp-install/include/* openmp.framework/Versions/A/Headers/
        sed -e 's/__NAME__/openmp/g' -e 's/__IDENTIFIER__/org.llvm.openmp/g' -e 's/__VERSION__/11.0/g' Info.plist > openmp.framework/Versions/A/Resources/Info.plist
        rm -f openmp-ios-bitcode.framework.zip
        zip -9 -y -r openmp-ios-bitcode.framework.zip openmp.framework
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: openmp-ios-bitcode
        path: openmp-install
    - name: upload-framework
      uses: actions/upload-artifact@v2
      with:
        name: openmp-ios-bitcode-framework
        path: openmp-ios-bitcode.framework.zip

  ios-bitcode:
    needs: [openmp-ios-bitcode]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: download-openmp-ios-bitcode
      uses: actions/download-artifact@v2
      with:
        name: openmp-ios-bitcode
        path: openmp-ios-bitcode
    - name: install-openmp
      run: |
        sudo cp openmp-ios-bitcode/include/* $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include
        sudo cp openmp-ios-bitcode/lib/libomp.a $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib
        sudo cp openmp-ios-bitcode/include/* $DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/include
        sudo cp openmp-ios-bitcode/lib/libomp.a $DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/libomp.a" \
            -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/libomp.a" \
            -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ncnn.framework
        mkdir -p ncnn.framework/Versions/A/Headers
        mkdir -p ncnn.framework/Versions/A/Resources
        ln -s A ncnn.framework/Versions/Current
        ln -s Versions/Current/Headers ncnn.framework/Headers
        ln -s Versions/Current/Resources ncnn.framework/Resources
        ln -s Versions/Current/ncnn ncnn.framework/ncnn
        lipo -create build/install/lib/libncnn.a build-simulator/install/lib/libncnn.a -o ncnn.framework/Versions/A/ncnn
        cp -r build/install/include/* ncnn.framework/Versions/A/Headers/
        sed -e 's/__NAME__/ncnn/g' -e 's/__IDENTIFIER__/com.tencent.ncnn/g' -e 's/__VERSION__/1.0/g' Info.plist > ncnn.framework/Versions/A/Resources/Info.plist
        rm -f ncnn-ios-bitcode.framework.zip
        zip -9 -y -r ncnn-ios-bitcode.framework.zip ncnn.framework
    - name: upload-framework
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-ios-bitcode-framework
        path: ncnn-ios-bitcode.framework.zip

  ios-gpu-bitcode:
    needs: [openmp-ios-bitcode]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: download-openmp-ios-bitcode
      uses: actions/download-artifact@v2
      with:
        name: openmp-ios-bitcode
        path: openmp-ios-bitcode
    - name: install-openmp
      run: |
        sudo cp openmp-ios-bitcode/include/* $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include
        sudo cp openmp-ios-bitcode/lib/libomp.a $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib
        sudo cp openmp-ios-bitcode/include/* $DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/include
        sudo cp openmp-ios-bitcode/lib/libomp.a $DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v1
      with:
        path: "vulkansdk-macos-1.2.135.0"
        key: vulkansdk-macos-1.2.135.0
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        wget https://sdk.lunarg.com/sdk/download/1.2.135.0/mac/vulkansdk-macos-1.2.135.0.tar.gz?Human=true -O vulkansdk-macos-1.2.135.0.tar.gz
        tar -xf vulkansdk-macos-1.2.135.0.tar.gz
        rm -rf vulkansdk-macos-1.2.135.0/Applications
        find vulkansdk-macos-1.2.135.0 -type f | grep -v -E 'vulkan|glslang|MoltenVK' | xargs rm
    - name: build
      run: |
        export VULKAN_SDK=`pwd`/vulkansdk-macos-1.2.135.0/macOS
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=OS64 -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="arm64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/libomp.a" \
            -DVulkan_INCLUDE_DIR=`pwd`/../vulkansdk-macos-1.2.135.0/MoltenVK/include \
            -DVulkan_LIBRARY=`pwd`/../vulkansdk-macos-1.2.135.0/MoltenVK/iOS/dynamic/libMoltenVK.dylib \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/ios.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DIOS_PLATFORM=SIMULATOR64 -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="x86_64" \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
            -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_CXX_LIB_NAMES="libomp" \
            -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/libomp.a" \
            -DVulkan_INCLUDE_DIR=`pwd`/../vulkansdk-macos-1.2.135.0/MoltenVK/include \
            -DVulkan_LIBRARY=`pwd`/../vulkansdk-macos-1.2.135.0/MoltenVK/iOS/dynamic/libMoltenVK.dylib \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package-glslang
      run: |
        rm -rf glslang.framework
        mkdir -p glslang.framework/Versions/A/Headers
        mkdir -p glslang.framework/Versions/A/Resources
        ln -s A glslang.framework/Versions/Current
        ln -s Versions/Current/Headers glslang.framework/Headers
        ln -s Versions/Current/Resources glslang.framework/Resources
        ln -s Versions/Current/glslang glslang.framework/glslang
        libtool -static build/install/lib/libglslang.a build/install/lib/libSPIRV.a build/install/lib/libOGLCompiler.a build/install/lib/libOSDependent.a -o build/install/lib/libglslang_combined.a
        libtool -static build-simulator/install/lib/libglslang.a build-simulator/install/lib/libSPIRV.a build-simulator/install/lib/libOGLCompiler.a build-simulator/install/lib/libOSDependent.a -o build-simulator/install/lib/libglslang_combined.a
        lipo -create build/install/lib/libglslang_combined.a build-simulator/install/lib/libglslang_combined.a -o glslang.framework/Versions/A/glslang
        cp -r build/install/include/glslang glslang.framework/Versions/A/Headers/
        sed -e 's/__NAME__/glslang/g' -e 's/__IDENTIFIER__/org.khronos.glslang/g' -e 's/__VERSION__/1.0/g' Info.plist > glslang.framework/Versions/A/Resources/Info.plist
        rm -f glslang-ios-bitcode.framework.zip
        zip -9 -y -r glslang-ios-bitcode.framework.zip glslang.framework
    - name: package
      run: |
        rm -rf ncnn.framework
        mkdir -p ncnn.framework/Versions/A/Headers
        mkdir -p ncnn.framework/Versions/A/Resources
        ln -s A ncnn.framework/Versions/Current
        ln -s Versions/Current/Headers ncnn.framework/Headers
        ln -s Versions/Current/Resources ncnn.framework/Resources
        ln -s Versions/Current/ncnn ncnn.framework/ncnn
        lipo -create build/install/lib/libncnn.a build-simulator/install/lib/libncnn.a -o ncnn.framework/Versions/A/ncnn
        cp -r build/install/include/* ncnn.framework/Versions/A/Headers/
        sed -e 's/__NAME__/ncnn/g' -e 's/__IDENTIFIER__/com.tencent.ncnn/g' -e 's/__VERSION__/1.0/g' Info.plist > ncnn.framework/Versions/A/Resources/Info.plist
        rm -f ncnn-ios-vulkan-bitcode.framework.zip
        zip -9 -y -r ncnn-ios-vulkan-bitcode.framework.zip ncnn.framework
    - name: upload-glslang-framework
      uses: actions/upload-artifact@v2
      with:
        name: glslang-ios-bitcode-framework
        path: glslang-ios-bitcode.framework.zip
    - name: upload-framework
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-ios-vulkan-bitcode-framework
        path: ncnn-ios-vulkan-bitcode.framework.zip

  android:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake
    - name: build-armv7
      run: |
        mkdir build-armv7 && cd build-armv7
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-14 \
            -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-aarch64
      run: |
        mkdir build-aarch64 && cd build-aarch64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-21 \
            -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-14 \
            -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-21 \
            -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ncnn-android-lib
        mkdir -p ncnn-android-lib
        mkdir -p ncnn-android-lib/armeabi-v7a
        mkdir -p ncnn-android-lib/arm64-v8a
        mkdir -p ncnn-android-lib/x86
        mkdir -p ncnn-android-lib/x86_64
        mkdir -p ncnn-android-lib/include
        cp build-armv7/install/lib/lib*.a ncnn-android-lib/armeabi-v7a/
        cp build-aarch64/install/lib/lib*.a ncnn-android-lib/arm64-v8a/
        cp build-x86/install/lib/lib*.a ncnn-android-lib/x86/
        cp build-x86_64/install/lib/lib*.a ncnn-android-lib/x86_64/
        cp -r build-aarch64/install/include/* ncnn-android-lib/include/
        rm -f ncnn-android-lib.zip
        zip -9 -r ncnn-android-lib.zip ncnn-android-lib
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-android-lib
        path: ncnn-android-lib.zip

  android-gpu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v1
      with:
        path: "1.2.148.1"
        key: vulkansdk-linux-x86_64-1.2.148.1
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        wget https://sdk.lunarg.com/sdk/download/1.2.148.1/linux/vulkansdk-linux-x86_64-1.2.148.1.tar.gz?Human=true -O vulkansdk-linux-x86_64-1.2.148.1.tar.gz
        tar -xf vulkansdk-linux-x86_64-1.2.148.1.tar.gz
        rm -rf 1.2.148.1/source 1.2.148.1/samples
        find 1.2.148.1 -type f | grep -v -E 'vulkan|glslang' | xargs rm
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake
    - name: build-armv7
      run: |
        export PATH=`pwd`/1.2.148.1/x86_64/bin:$PATH
        mkdir build-armv7 && cd build-armv7
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-aarch64
      run: |
        export PATH=`pwd`/1.2.148.1/x86_64/bin:$PATH
        mkdir build-aarch64 && cd build-aarch64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        export PATH=`pwd`/1.2.148.1/x86_64/bin:$PATH
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        export PATH=`pwd`/1.2.148.1/x86_64/bin:$PATH
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ncnn-android-vulkan-lib
        mkdir -p ncnn-android-vulkan-lib
        mkdir -p ncnn-android-vulkan-lib/armeabi-v7a
        mkdir -p ncnn-android-vulkan-lib/arm64-v8a
        mkdir -p ncnn-android-vulkan-lib/x86
        mkdir -p ncnn-android-vulkan-lib/x86_64
        mkdir -p ncnn-android-vulkan-lib/include
        cp build-armv7/install/lib/lib*.a ncnn-android-vulkan-lib/armeabi-v7a/
        cp build-aarch64/install/lib/lib*.a ncnn-android-vulkan-lib/arm64-v8a/
        cp build-x86/install/lib/lib*.a ncnn-android-vulkan-lib/x86/
        cp build-x86_64/install/lib/lib*.a ncnn-android-vulkan-lib/x86_64/
        cp -r build-aarch64/install/include/* ncnn-android-vulkan-lib/include/
        rm -f ncnn-android-vulkan-lib.zip
        zip -9 -r ncnn-android-vulkan-lib.zip ncnn-android-vulkan-lib
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-android-vulkan-lib
        path: ncnn-android-vulkan-lib.zip

  webassembly:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: emsdk
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION
    - name: build
      run: |
        source emsdk/emsdk_env.sh
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DNCNN_THREADS=OFF -DNCNN_OPENMP=OFF -DNCNN_SIMPLEOMP=OFF -DNCNN_RUNTIME_CPU=OFF -DNCNN_SSE2=OFF -DNCNN_AVX2=OFF \
            -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simd
      run: |
        source emsdk/emsdk_env.sh
        mkdir build-simd && cd build-simd
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DNCNN_THREADS=OFF -DNCNN_OPENMP=OFF -DNCNN_SIMPLEOMP=OFF -DNCNN_RUNTIME_CPU=OFF -DNCNN_SSE2=ON -DNCNN_AVX2=OFF \
            -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-threads
      run: |
        source emsdk/emsdk_env.sh
        mkdir build-threads && cd build-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DNCNN_THREADS=ON -DNCNN_OPENMP=ON -DNCNN_SIMPLEOMP=ON -DNCNN_RUNTIME_CPU=OFF -DNCNN_SSE2=OFF -DNCNN_AVX2=OFF \
            -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simd-threads
      run: |
        source emsdk/emsdk_env.sh
        mkdir build-simd-threads && cd build-simd-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DNCNN_THREADS=ON -DNCNN_OPENMP=ON -DNCNN_SIMPLEOMP=ON -DNCNN_RUNTIME_CPU=OFF -DNCNN_SSE2=ON -DNCNN_AVX2=OFF \
            -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ncnn-webassembly-lib
        mkdir -p ncnn-webassembly-lib
        cp -r build/install ncnn-webassembly-lib/basic
        cp -r build-simd/install ncnn-webassembly-lib/simd
        cp -r build-threads/install ncnn-webassembly-lib/threads
        cp -r build-simd-threads/install ncnn-webassembly-lib/simd-threads
        rm -f ncnn-webassembly-lib.zip
        zip -9 -r ncnn-webassembly-lib.zip ncnn-webassembly-lib
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ncnn-webassembly-lib
        path: ncnn-webassembly-lib.zip

  windows-vs2017:
    runs-on: windows-2016
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: cache-protobuf
      id: cache-protobuf
      uses: actions/cache@v1.0.3
      with:
        path: "protobuf-install"
        key: protobuf-vs2017-x64-install3
    - name: protobuf
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://github.com/protocolbuffers/protobuf/archive/v3.11.2.zip -OutFile protobuf-3.11.2.zip
        7z x ./protobuf-3.11.2.zip
        cd protobuf-3.11.2
        mkdir build-vs2017; cd build-vs2017; cmake -T v141,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE\protobuf-install" -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_MSVC_STATIC_RUNTIME=OFF -DNCNN_BUILD_TESTS=ON ../cmake
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v1.0.3
      with:
        path: "VulkanSDK"
        key: VulkanSDK-1.1.114.0-Installer
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/1.1.114.0/windows/VulkanSDK-1.1.114.0-Installer.exe?Human=true -OutFile VulkanSDK-1.1.114.0-Installer.exe
        7z x -aoa ./VulkanSDK-1.1.114.0-Installer.exe -oVulkanSDK
        Remove-Item .\VulkanSDK\Demos, .\VulkanSDK\glslang, .\VulkanSDK\Samples, .\VulkanSDK\shaderc, .\VulkanSDK\spirv-tools, .\VulkanSDK\Third-Party, .\VulkanSDK\Tools, .\VulkanSDK\Tools32 -Recurse
    - name: build
      run: |
        $env:VULKAN_SDK="$(pwd)/VulkanSDK"
        mkdir build; cd build
        cmake -T v141,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DProtobuf_INCLUDE_DIR="$env:GITHUB_WORKSPACE\protobuf-install\include" -DProtobuf_LIBRARIES="$env:GITHUB_WORKSPACE\protobuf-install\lib\libprotobuf.lib" -DProtobuf_PROTOC_EXECUTABLE="$env:GITHUB_WORKSPACE\protobuf-install\bin\protoc.exe" -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        Get-ChildItem -Recurse build
        mkdir ncnn-windows-vs2017
        mkdir ncnn-windows-vs2017/bin
        Copy-Item -Verbose -Recurse -Path "build\Release\install\*" -Destination "ncnn-windows-vs2017"
        Copy-Item -Verbose -Path "build\tools\caffe\Release\caffe2ncnn.exe" -Destination "ncnn-windows-vs2017\bin"
        Copy-Item -Verbose -Path "build\tools\mxnet\Release\mxnet2ncnn.exe" -Destination "ncnn-windows-vs2017\bin"
        Copy-Item -Verbose -Path "build\tools\onnx\Release\onnx2ncnn.exe" -Destination "ncnn-windows-vs2017\bin"
        Copy-Item -Verbose -Path "build\tools\darknet\Release\darknet2ncnn.exe" -Destination "ncnn-windows-vs2017\bin"
        Copy-Item -Verbose -Path "build\tools\Release\ncnnoptimize.exe" -Destination "ncnn-windows-vs2017\bin"
        Copy-Item -Verbose -Path "build\tools\Release\ncnn2mem.exe" -Destination "ncnn-windows-vs2017\bin"
        Copy-Item -Verbose -Path "build\tools\Release\ncnnmerge.exe" -Destination "ncnn-windows-vs2017\bin"
        7z a -r ncnn-windows-vs2017.zip ncnn-windows-vs2017
    - uses: actions/upload-artifact@v2
      with:
        name: ncnn-windows-vs2017
        path: ncnn-windows-vs2017.zip

  windows-vs2019:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: cache-protobuf
      id: cache-protobuf
      uses: actions/cache@v1
      with:
        path: "protobuf-install"
        key: protobuf-windows-install
    - name: protobuf
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://github.com/protocolbuffers/protobuf/archive/v3.11.2.zip -OutFile protobuf-3.11.2.zip
        7z x ./protobuf-3.11.2.zip
        cd protobuf-3.11.2
        mkdir build-vs2019; cd build-vs2019; cmake -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE\protobuf-install" -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_MSVC_STATIC_RUNTIME=OFF -DNCNN_BUILD_TESTS=ON ../cmake
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: cache-vulkansdk
      id: cache-vulkansdk
      uses: actions/cache@v1
      with:
        path: "VulkanSDK"
        key: VulkanSDK-1.1.114.0-Installer
    - name: vulkansdk
      if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/1.1.114.0/windows/VulkanSDK-1.1.114.0-Installer.exe?Human=true -OutFile VulkanSDK-1.1.114.0-Installer.exe
        7z x -aoa ./VulkanSDK-1.1.114.0-Installer.exe -oVulkanSDK
        Remove-Item .\VulkanSDK\Demos, .\VulkanSDK\glslang, .\VulkanSDK\Samples, .\VulkanSDK\shaderc, .\VulkanSDK\spirv-tools, .\VulkanSDK\Third-Party, .\VulkanSDK\Tools, .\VulkanSDK\Tools32 -Recurse
    - name: build
      run: |
        $env:VULKAN_SDK="$(pwd)/VulkanSDK"
        mkdir build; cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DProtobuf_INCLUDE_DIR="$env:GITHUB_WORKSPACE\protobuf-install\include" -DProtobuf_LIBRARIES="$env:GITHUB_WORKSPACE\protobuf-install\lib\libprotobuf.lib" -DProtobuf_PROTOC_EXECUTABLE="$env:GITHUB_WORKSPACE\protobuf-install\bin\protoc.exe" -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        Get-ChildItem -Recurse build
        mkdir ncnn-windows-vs2019
        mkdir ncnn-windows-vs2019/bin
        Copy-Item -Verbose -Recurse -Path "build\Release\install\*" -Destination "ncnn-windows-vs2019"
        Copy-Item -Verbose -Path "build\tools\caffe\Release\caffe2ncnn.exe" -Destination "ncnn-windows-vs2019\bin"
        Copy-Item -Verbose -Path "build\tools\mxnet\Release\mxnet2ncnn.exe" -Destination "ncnn-windows-vs2019\bin"
        Copy-Item -Verbose -Path "build\tools\onnx\Release\onnx2ncnn.exe" -Destination "ncnn-windows-vs2019\bin"
        Copy-Item -Verbose -Path "build\tools\darknet\Release\darknet2ncnn.exe" -Destination "ncnn-windows-vs2019\bin"
        Copy-Item -Verbose -Path "build\tools\Release\ncnnoptimize.exe" -Destination "ncnn-windows-vs2019\bin"
        Copy-Item -Verbose -Path "build\tools\Release\ncnn2mem.exe" -Destination "ncnn-windows-vs2019\bin"
        Copy-Item -Verbose -Path "build\tools\Release\ncnnmerge.exe" -Destination "ncnn-windows-vs2019\bin"
        7z a -r ncnn-windows-vs2019.zip ncnn-windows-vs2019
    - uses: actions/upload-artifact@v2
      with:
        name: ncnn-windows-vs2019
        path: ncnn-windows-vs2019.zip
