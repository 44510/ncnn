#version 450

layout (constant_id = 0) const int top = 0;
layout (constant_id = 1) const int bottom = 1;
layout (constant_id = 2) const int left = 1;
layout (constant_id = 3) const int right = 1;
layout (constant_id = 4) const int type = 1;
layout (constant_id = 5) const float value = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) readonly buffer bottom_blob { float bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { float top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;

    int outdims;
    int outw;
    int outh;
    int outc;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= p.outh || gz >= p.outc)
        return;

    float res;

    int x = gx - left;
    int y = gy - top;

    if (type == 0)
    {
        if (x >= 0 && x < p.w && y >= 0 && y < p.h)
        {
            int v_offset = gz * p.cstep + y * p.w + x;
            res = bottom_blob_data[v_offset];
        }
        else
        {
            res = value;
        }
    }
    else if (type == 1)
    {
        x = clamp(x, 0, p.w - 1);
        y = clamp(y, 0, p.h - 1);

        int v_offset = gz * p.cstep + y * p.w + x;
        res = bottom_blob_data[v_offset];
    }

    top_blob_data[gz * p.outcstep + gy * p.outw + gx] = res;
}
